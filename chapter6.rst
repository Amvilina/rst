Глава 6. Знакомство с каналом stream+
-------------------------------------

  Парктически все сервисы в продакшене связаны между собой с помощью ``stream+`` каналов ( например, ``stream+pub+tcp`` ). Ниже будут подробнее описаны возможности данного канала и причины его использования. Для простоты будем рассматривать случай именно ``stream+pub+tcp``

|

Overview stream+
^^^^^^^^^^^^^^^^

  - ``stream+`` - оболочка вокруг стандартных каналов связи, которая позволяет расширить возможности обмена данными и автоматизировать этот процесс
  - Канал на самом деле состоит из 2-х: ``online`` и ``request``
  - Участников стоит разделить по принципу работы на ``mode: server / client``
  - ``online`` ( ``stream+pub+tcp`` ) - постоянный канал связи с отношением 1 сервер : много клиентов
  - ``request`` ( ``stream+tcp`` ) - временный канал связи, который каждый клиент открывает с сервером для получения специфичных данных. Этот канал открывается только в моменты открытия клиента ( вызове функции ``_open(...)`` )

Что может stream+ сервер?
^^^^^^^^^^^^^^^^^^^^^^^^^

  - Через канал ``online`` сервер транслирует нужную информацию всем клиентам, которые подключены к нему. Принцип работы 1 в 1, как с простым ``pub+tcp``
  - Одновременно с трансляцией сервер сохраняет все отправленные сообщение в специальное хранилище, которое чаще всего организовано с помощью ``rotate+file`` ( будет описано ниже )
  - При подключении клиента к каналу ``request`` ( для каждого клиента свой ), сервер отправляет специально запрошенные данные от клиента ( будут описаны в главе для клиента ), при этом продолжая транслировать свои сообщения в ``online``

Что может stream+ клиент?
^^^^^^^^^^^^^^^^^^^^^^^^^

  - Через канал ``online`` клиент подключается к серверу, после чего получает возможность 'в реальном времени' получать данные от сервера
  - В момент открытия ( вызове функции ``_open(...)`` ) клиент может открыть канал ``request`` с сервером для того, чтобы запросить специальные данные. Сам канал скрыт от логики, передача всех специальных данных ( срезов или исторических данных ) происходит 'под катом'
  - Если клиенту не нужно никакой специальной информации от сервера, т.е. ему требуется просто подключиться к каналу ``online``, то для этого в параметрах открытия стоит прописать: ``open: {mode: online}``. В таком случае клиент превратится в обычного клиента ``pub+tcp``
  - Клиент имеет возможность запросить старые данные у сервера, начиная с какого-то ``seq``. Для этого в параметрах открытия стоит прописать: ``open: {mode: seq, seq: 100}``. При открытии канала в этом режиме происходит следующая последовательность действий:

    - Клиент подключается к каналу ``online``, чтобы иметь возможность получать сообщения
    - Клиент открывает канал ``request`` и отправляет запрос серверу, чтобы получить все сообщения, начиная с запрошенного ``seq``
    - Сервер в ответ на этот запрос отправляет специальное сообщение ``Reply``, где записан ``last_seq`` последнего сообщения, которое было отправлено через канал ``online``
    - Клиент начинает получать сообщения из ``online`` и записывать их в специальный буфер
    - Сервер отправлет клиенту сообщения через канал ``request``. Если ``seq=100`` и ``last_seq=130``, то сервер отправит сообщения с номерами: ``seq in [100, 130]``
    - Клиент получает и обрабатывает все приходящие исторические сообщения ( сначала от сервера через ``request``, затем накопленные из буфера )
    - После окончания обработки всех сообщений клиент генерирует специальное сообщение ``Online``, закрывает канал ``request`` и переходит к режиму обработки сообщений, получаемых из канала ``online`` ( т.е. превращается в простого клиента ``pub+tcp`` )
  - Ещё можно открыть канал ``request`` с параметром ``seq-data``, который инкрементирует первый ``seq``. Следующие 2 записи 'аналогичны': ``open: {mode: seq, seq: 101}`` и ``open: {mode: seq-data, seq: 100}`` 
  - Обработка исторических и онлайн сообщений ( до и после получения специального сообщения ``Online`` ) часто очень отличается. Пример: заявки клиентов, полученные в 'историческом' режиме будут отклоняться, а в 'онлайн' - обрабатываться

