Глава 11. Знакомство со схемами
-------------------------------

  Схемы - удобный способ для кодирования сообщений при передаче и декодировании при получении. Мы раньше рассматривали схемы, когда писали комиссионный сервис. Там данные хранились и передавались в формате сообщений ``Transaction`` и ``Commission``. 

Что такое схема?
^^^^^^^^^^^^^^^^

  - Для простоты мы можем рассматривать схемы, как C++ (или другой язык) структуры, которые содержит информацию о кодировании/декодировании данных.
  - В TLL есть методы, которые конвертируют файлы ``.yaml`` в подходящую C++ схему.
  - Сама по себе схема не имеет логического смысла, она лишь является контейнером для сообщений, которые несут в себе необходимую информацию. Каждая структура состоит из одного или нескольких сообщений.
  - Рассмотрим структуру схемы:

    .. code:: c++

      typedef struct tll_scheme_t
      {

        // основное поле для схемы
        // в нём хранится указатель на первое сообщение в связанном списке
        struct tll_scheme_message_t * messages;

        // ... другие поля ...

      } tll_scheme_t;


Что такое сообщение?
^^^^^^^^^^^^^^^^^^^^

  - С сообщениями мы уже работали, примеры: ``Transaction`` и ``Commission``.
  - Сообщение - самобытный носитель какой-то информации, которая объединена по смыслу.
  - Сообщение может состоять из нескольких полей различных типов. Сообщения могут хранить внутри себя другие сообщения.
  - Рассмотрим структуру сообщения:

    .. code:: c++

      typedef struct tll_scheme_message_t
      {
      
        // указатель на следующее сообщение в связанном списке
        // если nullptr, то мы дошли до конца
        struct tll_scheme_message_t * next;

        // уникальный msgid сообщения, чтобы можно было их различать
        int msgid;

        // имя сообщения
        const char * name;

        // размер данного сообщения
        size_t size;

        // указатель на первое поле в связанном списке всех полей данного сообщения
        struct tll_scheme_field_t * fields;

        // ... другие поля ...

      } tll_scheme_message_t;


Что такое поле?
^^^^^^^^^^^^^^^

  - Поле представляет из себя фундаментальную единицу информации.
  - Это может быть, как простое число, так и целое сообщение, которое хранится внутри.

  - Рассмотрим cтруктуру поля:

    .. code:: c++

      typedef struct tll_scheme_field_t
      {
        
        // указатель на следующее поле в односвязном списке полей
        // если nullptr, то дошли до конца
        struct tll_scheme_field_t * next;
      
        // имя поля
        const char * name;

        // его отступ при кодировании/декодировании всего сообщения
        size_t offset;

        // размер поля
        size_t size;

        // тип поля
        tll_scheme_field_type_t type;

        // подтип поля
        tll_scheme_sub_type_t sub_type;
        
        // дополнительная информация о поле
        // зависит от типа и подтипа поля
        union {
          // ...
        }

        // ... другие поля ...

      }

  - Перечисления типов/подтипов полей выше имеют такой вид:

    .. code:: c++

      typedef enum tll_scheme_field_type_t
      {
        TLL_SCHEME_FIELD_INT8,
        TLL_SCHEME_FIELD_INT16,
        TLL_SCHEME_FIELD_INT32,
        TLL_SCHEME_FIELD_INT64,
        TLL_SCHEME_FIELD_UINT8,
        TLL_SCHEME_FIELD_UINT16,
        TLL_SCHEME_FIELD_UINT32,
        TLL_SCHEME_FIELD_DOUBLE,
        TLL_SCHEME_FIELD_DECIMAL128,
        TLL_SCHEME_FIELD_BYTES,
        TLL_SCHEME_FIELD_MESSAGE,
        TLL_SCHEME_FIELD_ARRAY,
        TLL_SCHEME_FIELD_POINTER,
        TLL_SCHEME_FIELD_UNION,
        TLL_SCHEME_FIELD_UINT64,
      } tll_scheme_field_type_t;
      
      typedef enum tll_scheme_sub_type_t
      {
        TLL_SCHEME_SUB_NONE,
        TLL_SCHEME_SUB_ENUM,
        TLL_SCHEME_SUB_BYTE_STRING,
        TLL_SCHEME_SUB_FIXED_POINT,
        TLL_SCHEME_SUB_TIME_POINT,
        TLL_SCHEME_SUB_DURATION,
        TLL_SCHEME_SUB_BITS,
      } tll_scheme_sub_type_t;

Типы полей в TLL
^^^^^^^^^^^^^^^^

  - ``Enum`` - стандартное перечисление

    - ``type`` - любой целый тип
    - ``sub_type`` - ``TLL_SCHEME_SUB_ENUM``


  - ``String`` - стандартная строка

    - ``type`` - ``TLL_SCHEME_FIELD_BYTES``
    - ``sub_type`` - ``TLL_SCHEME_SUB_BYTE_STRING``


  - ``TimePoint`` - временная метка ``Unix``

    - ``type`` - любой целый тип
    - ``sub_type`` - ``TLL_SCHEME_SUB_TIME_POINT``

  - ``Duration`` - длительность

    - ``type`` - любой целый тип, а также ``TLL_SCHEME_FIELD_DOUBLE``
    - ``sub_type`` - ``TLL_SCHEME_SUB_DURATION``


  - ``Fixed`` - вещественное число с фиксированной точкой

    - ``type`` - любой целый тип
    - ``sub_type`` - ``TLL_SCHEME_SUB_FIXED_POINT``


  - ``Bits`` - стандартные флаги / маски

    - ``type`` - любой целый тип
    - ``sub_type`` - ``TLL_SCHEME_SUB_BITS``


  - ``Decimal128`` - вещественное число с плавающей точкой ``(IEEE 754)``

    - ``type`` - ``TLL_SCHEME_FIELD_DECIMAL128``
    - ``sub_type`` - ``TLL_SCHEME_SUB_NONE``


  - ``Bytes`` - массив фиксированный длины с байтами

    - ``type`` - ``TLL_SCHEME_FIELD_BYTES``
    - ``sub_type`` - ``TLL_SCHEME_SUB_NONE``

  - ``Message`` - другое сообщение ( удобно для разделения данных на логические элементы )

    - ``type`` - ``TLL_SCHEME_FIELD_MESSAGE``
    - ``sub_type`` - ``TLL_SCHEME_SUB_NONE``

  - ``Array`` - произвольный массив фиксированной максимальной длины

    - ``type`` - ``TLL_SCHEME_FIELD_ARRAY``
    - ``sub_type`` - ``TLL_SCHEME_SUB_NONE``


  - ``Pointer`` - произвольный массив произвольной длины

    - ``type`` - ``TLL_SCHEME_FIELD_POINTER``
    - ``sub_type`` - ``TLL_SCHEME_SUB_NONE``


  - ``Union`` - стандартное объединение полей под общую область памяти

    - ``type`` - ``TLL_SCHEME_FIELD_UNION``
    - ``sub_type`` - ``TLL_SCHEME_SUB_NONE``


  - ``Primitive`` - примитивные типы данных, которые поддерживаются везде

    - ``type`` - зависит от конкретного типа данных
    - ``sub_type`` - ``TLL_SCHEME_SUB_NONE``

    - ``Int8 / Int16 / Int32 / Int64`` - целые числа со знаком
    - ``UInt8 / UInt16 / UInt32 / UInt64`` - целые числа без знака
    - ``Double`` - вещественное число с плавающей точкой двойной точности

Рассмотрим подробнее каждый тип данных
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enum
====


  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        // указатель на структура, которая описывает данное перечисление
        struct tll_scheme_enum_t * type_enum;

        // ...
      }
  - Рассмотрим эту структуру:

    .. code:: c++

      typedef struct tll_scheme_enum_t
      {
        // указатель на первый элемент в связанном списке
        struct tll_scheme_enum_value_t * values;
        
        // ... другие поля ...
      } tll_scheme_enum_t;

  - Рассмотрим внутреннюю структуру:

    .. code:: c++

      typedef struct tll_scheme_enum_value_t
      {
        // указатель на следующий элемент в связанном списке
        // если nullptr, то последний
        struct tll_scheme_enum_value_t * next;

        // имя, которое используется в перечеслении
        const char * name;

        // значение, которое 'стоит за этим именем'
        long long value;
      } tll_scheme_enum_value_t;


String
======

  - Строка должна быть NULL-терменированной
  - В поле ``size`` хранится число выделенной памяти под строку, её настоящая длина зависит от NULL-терминала

TimePoint / Duration
====================

  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        // перечесление, которое показывает точность времени
        tll_scheme_time_resolution_t time_resolution;

        // ...
      }
  - Рассмотрим это перечисление:

    .. code:: c++

      typedef enum tll_scheme_time_resolution_t {
        TLL_SCHEME_TIME_NS,     // наносекунды
        TLL_SCHEME_TIME_US,     // микросекунды
        TLL_SCHEME_TIME_MS,     // миллисекунды
        TLL_SCHEME_TIME_SECOND, // секунды
        TLL_SCHEME_TIME_MINUTE, // минуты
        TLL_SCHEME_TIME_HOUR,   // часы
        TLL_SCHEME_TIME_DAY,    // дни
      } tll_scheme_time_resolution_t;


Fixed
=====

  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        // число знаков после запятой, которое хранит данное число
        unsigned fixed_precision;

        // ...
      }

  -  Если ``fixed_precision == 2``, а сырые данные хранят в себе число ``12345``, то мы его интерпретируем как ``123.45``

Bits
====

  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        struct {
          
          // описание каждого бита ( флага ) данного поля
          // указатель на первый элемент связанного списка
          struct tll_scheme_bit_field_t * bitfields;

          // описание флагового поля ( не столь важная структура )
          struct tll_scheme_bits_t * type_bits;
        };

        // ...
      }

  - Рассмотрим подробнее структуру флага:

    .. code:: c++

      typedef struct tll_scheme_bit_field_t
      {
        // указатель на следующий элемент в связанном списке
        // если nullptr, то конец
        struct tll_scheme_bit_field_t * next;

        // название бита / флага
        const char * name;

        // отступ ( индекс ) бита в целом числе
        unsigned offset;
        
        // размер флага в битах, почти всегда == 1
        unsigned size;
      } tll_scheme_bit_field_t;

  - Если рассмотреть флаг из 1 байта ( 8 бит ): ``abcdefgh``, то для флага ``d`` ``offset`` будет равен 3

Decimal128
==========

  - Специальный тип данных для повышенной точности вещественных чисел.
  - Не всегда есть возможность поддержки 128 битовых операций и типов данных, поэтому для кодировки / декодировки можно использовать структуру:

    .. code:: c++

      struct {
        uint64_t lo;
        uint64_t hi;
      };
  - После этого с помощью ``reinterpret_cast<...>(...)`` кодировать и декодировать сообщение.

Bytes
=====

  - В поле ``size`` хранится длина данного массива.
  - Его длина всегда равна длине выделенной памяти.

Message
=======

  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        // указатель на структуру, которая описывает сообщение
        struct tll_scheme_message_t * type_msg;

        // ...
      }


Array
=====

  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        struct {

          // указатель на поле, которое описывает хранимые в массиве данные
          struct tll_scheme_field_t * type_array;

          // указатель на поле, которое описывает размер ( целочисленный тип )
          struct tll_scheme_field_t * count_ptr;

          // сколько элементов выделено в памяти ( размер массива может быть меньше )
          size_t count;
        };

        // ...
      }

  - При кодировке / декодировке данного типа данных в начале идёт поле ( тип данных описан в ``count_ptr`` ), в котором хранится число элементов в массиве ``n``.
  - Затем идёт ``n`` полей с данным ( тип которых описан в ``type_array`` )

Pointer
=======

  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        struct {
          // указатель на поле, которое описывает хранимые в динамическом массиве данные
          struct tll_scheme_field_t * type_ptr;

          // вид указателя ( устаревшее поле, не используется )
          tll_scheme_offset_ptr_version_t offset_ptr_version;
        };

        // ...
      }

  - При кодировании / декодировании данных ``Pointer`` представляет из себя следующую структуру из 8 байт:

    .. code:: c++

      typedef struct __attribute__((packed)) tll_scheme_offset_ptr_t
      {
        // отступ от данного поля, где хранятся настоящие данные
        uint32_t offset;

        // длина данных ( 3 байта занимает поле )
        uint32_t size : 24;

        // опциональное поле ( длина каждого элемента динамического массива )
        // если длина больше, то длина хранится перед массивом
        uint8_t  entity;
      } tll_scheme_offset_ptr_t;

Union
=====

  - Если поле имеет этот тип, то в ``union`` хранится дополнительная информация:

    .. code:: c++

      union 
      {
        // указатель на структуру, которая хранит информацию об объединении
        struct tll_scheme_union_t * type_union;

        // ...
      }
  - Рассмотрим эту структуру:

    .. code:: c++

      typedef struct tll_scheme_union_t
      {
        // указатель на первое поле в массиве полей
        struct tll_scheme_field_t * fields;

        // число полей в объединении
        size_t fields_size;
        
        // ... другие поля ...
      } tll_scheme_union_t;

  - При кодировке / декодировке данного типа данных в начале идёт ``uint8_t``, в котором указан индекс ( тэг ) поля, которое хранится в объединении. Только затем идут данные.


Primitive
=========

  - Самый простой тип данных, про который мы все давно знаем, ничего особенного :)
